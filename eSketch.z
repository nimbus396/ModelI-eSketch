;
; Simple Etch-a-Sketch for the TRS-80 Model-1
;
; Author  : Andy johnson
; Date    : 2020/08/28
;
; Version : 1.0

; Model-I Calls

Cls:	equ	01c9h		; Clears the screen
KbScan:	equ	002bh		; Same as INKEY$ (Basic)
SetXmin:equ	0		; X Coordinate Minimum
SetXMax:equ	127d		; X Coordinate Maximun (127)
SetYMin:equ	SetXmin		; Y = X minimum (0) for Set
SetYMax:equ	44d		; Max is 47 but, save last line
SetCall:equ	150h		; To be loaded to HL
SetOn:	equ	80h		; Turn SET() on
SetOff:	equ	01h		; Turn RESET() on
SetEnd:	equ	188ch		; RST will call this and find )+
MsgPos:	equ	3fc0h		; last line
Delay:	equ	0060h		; Delays for BC*14.65 microseconds

	org	8000h		; Origin
;Variables
Mesg:	db	" ----------------- Arrows to move, Q to quit -----------------",0
QMsg:	db	" ------------------------ Quitting !!! -----------------------",0
OutMsg: db "Press <Enter>",0

; Coordinates and SET() flag
XCoord:	ds	1
YCoord:	ds	1
SetFlg:	ds	1

Init:
	call	Cls		; Clear the screen
	ld	a,65		; Start in the middle of the screen
	ld	(XCoord), a	; save X
	ld	a,23
	ld	(YCoord), a	; save Y
	ld	bc,Mesg		; Print instructions at bottom of screen
	call	PrintMsg
	
Start:
	; This simulates a blinking block by turning it on and off
	ld	a,(SetOn)	; show the block
	ld	(SetFlg),a
	call	Grafix

	ld	bc,2048d	; delay before off
	call	Delay		; destroys bc

	ld	a,(SetOff)	; hide the block
	ld	(SetFlg),a
	call	Grafix

	call	GetKey		; Get keyboard input

; Did we quit?
	cp	51h		; Press Q
	jr	nz,Start
	ld	bc,QMsg		; Print the Quit message
	call	PrintMsg
	ld	bc,2048d	; delay before off
	call	Delay		; destroys bc
	call	Cls		; Clear the screen
	ld	bc,OutMsg	;Display "Press Enter"
	call 	PrintMsg
	ret

; Uses SET/RESET to draw based on SET FLAG
Grafix:
	ld	a,(SetFlg)	; Set the SET() flag
	ld	h,a		; Store in H for SET routine
	ld	a,(XCoord)	; Set X
	ld	b,a
	ld	a,(YCoord)	; Set Y

	; Push these before call (Required by SET)
	push	hl
	push	bc

	; Use SET/RESET. HL and BC are parameters
	ld	hl,SetEnd
	jp	SetCall
	ret

; Get a key from the keyboard and do something
; Assumes Q is Quit
GetKey:
	call	KbScan
;up key
	cp	5bh
	call	z,Up

;down key
	cp	0ah
	call	z,Down

;right key
	cp	9h
	call	z,Right

;left key
	cp	8h
	call	z,Left
	ret

; Key Actions
Up:
	push af			; Save A and Flags	
	push bc			; Save BC pair
	ld	a,(YCoord)	; Get X Coordinate
	dec	a		; add 1
	cp	SetYMin		; We hit the edge
	jr	nz,USkip
	inc	a
USkip:
	ld	(YCoord),a	; Save it
	pop	bc		; Restore BC
	pop	af		; Restore A and Flags
	ret
Down:
	push af			; Save A and Flags	
	push bc			; Save BC pair
	ld	a,(YCoord)	; Get X Coordinate
	inc	a		; add 1
	cp	SetYMax		; We hit the edge
	jr	nz,DSkip
	dec	a		; sub 1 if edge
DSkip:
	ld	(YCoord),a	; Save it
	pop	bc		; Restore BC
	pop	af		; Restore A and Flags
	ret
Left:
	push af			; Save A and Flags	
	push bc			; Save BC pair
	ld	a,(XCoord)	; Get X Coordinate
	dec	a		; sub 1
	cp	SetXMin		; We hit the edge
	jr	nz,LSkip
	inc	a		; add 1 if edge
LSkip:
	ld	(XCoord),a	; Save it
	pop	bc		; Restore BC
	pop	af		; Restore A and Flags
	ret			; Return
Right:
	push af			; Save A and Flags	
	push bc			; Save BC pair
	ld	a,(XCoord)	; Get X Coordinate
	inc	a		; add 1
	cp	SetXMax		; We hit the edge
	jr	nz,RSkip
	dec	a		; sub 1 if edge
RSkip:
	ld	(XCoord),a	; Save it
	pop	bc		; Restore BC
	pop	af		; Restore A and Flags
	ret			; Return

; Prints a message to the Message line
PrintMsg:
	ld	hl,MsgPos
	push	hl
	ld	a,40
; Clear the message line
Cloop:
	ld	(hl),' '
	inc	hl
	dec	a
	jr	nz,Cloop

	pop	hl
; and write the messag
Mloop:
	ld	a,(bc)
	or	a
	ret	z
	ld	(hl),a
	inc	bc
	inc	hl
	jr	Mloop



; Nothing below this line
	end Init
